package org.leisurely_script.gdl.types

/**
  * Created by mcsmash on 1/25/16.
  */
case class CharExpressionExpression(value:CharExpression) extends GameAnyVal[CharExpression](value) { 
  def !=(x: DoubleExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: FloatExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: LongExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: IntExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: CharExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: ShortExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: ByteExpression): BooleanExpression = BooleanExpression(value != other.value)
  def %(x: DoubleExpression): DoubleExpression = DoubleExpression(value % other.value)
  def %(x: FloatExpression): FloatExpression = FloatExpression(value % other.value)
  def %(x: LongExpression): LongExpression = LongExpression(value % other.value)
  def %(x: IntExpression): IntExpression = IntExpression(value % other.value)
  def %(x: CharExpression): IntExpression = IntExpression(value % other.value)
  def %(x: ShortExpression): IntExpression = IntExpression(value % other.value)
  def %(x: ByteExpression): IntExpression = IntExpression(value % other.value)
  def &(x: LongExpression): LongExpression = LongExpression(value & other.value)
  def &(x: IntExpression): IntExpression = IntExpression(value & other.value)
  def &(x: CharExpression): IntExpression = IntExpression(value & other.value)
  def &(x: ShortExpression): IntExpression = IntExpression(value & other.value)
  def &(x: ByteExpression): IntExpression = IntExpression(value & other.value)
  def *(x: DoubleExpression): DoubleExpression = DoubleExpression(value * other.value)
  def *(x: FloatExpression): FloatExpression = FloatExpression(value * other.value)
  def *(x: LongExpression): LongExpression = LongExpression(value * other.value)
  def *(x: IntExpression): IntExpression = IntExpression(value * other.value)
  def *(x: CharExpression): IntExpression = IntExpression(value * other.value)
  def *(x: ShortExpression): IntExpression = IntExpression(value * other.value)
  def *(x: ByteExpression): IntExpression = IntExpression(value * other.value)
  def +(x: DoubleExpression): DoubleExpression = DoubleExpression(value + other.value)
  def +(x: FloatExpression): FloatExpression = FloatExpression(value + other.value)
  def +(x: LongExpression): LongExpression = LongExpression(value + other.value)
  def +(x: IntExpression): IntExpression = IntExpression(value + other.value)
  def +(x: CharExpression): IntExpression = IntExpression(value + other.value)
  def +(x: ShortExpression): IntExpression = IntExpression(value + other.value)
  def +(x: ByteExpression): IntExpression = IntExpression(value + other.value)
  def +(x: StringExpression): StringExpression = StringExpression(value + other.value)
  def -(x: DoubleExpression): DoubleExpression = DoubleExpression(value - other.value)
  def -(x: FloatExpression): FloatExpression = FloatExpression(value - other.value)
  def -(x: LongExpression): LongExpression = LongExpression(value - other.value)
  def -(x: IntExpression): IntExpression = IntExpression(value - other.value)
  def -(x: CharExpression): IntExpression = IntExpression(value - other.value)
  def -(x: ShortExpression): IntExpression = IntExpression(value - other.value)
  def -(x: ByteExpression): IntExpression = IntExpression(value - other.value)
  def /(x: DoubleExpression): DoubleExpression = DoubleExpression(value / other.value)
  def /(x: FloatExpression): FloatExpression = FloatExpression(value / other.value)
  def /(x: LongExpression): LongExpression = LongExpression(value / other.value)
  def /(x: IntExpression): IntExpression = IntExpression(value / other.value)
  def /(x: CharExpression): IntExpression = IntExpression(value / other.value)
  def /(x: ShortExpression): IntExpression = IntExpression(value / other.value)
  def /(x: ByteExpression): IntExpression = IntExpression(value / other.value)
  def <(x: DoubleExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: FloatExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: LongExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: IntExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: CharExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: ShortExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: ByteExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <<(x: LongExpression): IntExpression = IntExpression(value << other.value)
  def <<(x: IntExpression): IntExpression = IntExpression(value << other.value)
  def <=(x: DoubleExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: FloatExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: LongExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: IntExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: CharExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: ShortExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: ByteExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def ==(x: DoubleExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: FloatExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: LongExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: IntExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: CharExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: ShortExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: ByteExpression): BooleanExpression = BooleanExpression(value == other.value)
  def >(x: DoubleExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: FloatExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: LongExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: IntExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: CharExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: ShortExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: ByteExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >=(x: DoubleExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: FloatExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: LongExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: IntExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: CharExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: ShortExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: ByteExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >>(x: LongExpression): IntExpression = IntExpression(value >> other.value)
  def >>(x: IntExpression): IntExpression = IntExpression(value >> other.value)
  def >>>(x: LongExpression): IntExpression = IntExpression(value >>> other.value)
  def >>>(x: IntExpression): IntExpression = IntExpression(value >>> other.value)
  def ^(x: LongExpression): LongExpression = LongExpression(value ^ other.value)
  def ^(x: IntExpression): IntExpression = IntExpression(value ^ other.value)
  def ^(x: CharExpression): IntExpression = IntExpression(value ^ other.value)
  def ^(x: ShortExpression): IntExpression = IntExpression(value ^ other.value)
  def ^(x: ByteExpression): IntExpression = IntExpression(value ^ other.value)
  def |(x: LongExpression): LongExpression = LongExpression(value | other.value)
  def |(x: IntExpression): IntExpression = IntExpression(value | other.value)
  def |(x: CharExpression): IntExpression = IntExpression(value | other.value)
  def |(x: ShortExpression): IntExpression = IntExpression(value | other.value)
  def |(x: ByteExpression): IntExpression = IntExpression(value | other.value)
  def byteValue(): ByteExpression = ByteExpression(value byteValue other.value)
  def charValue(): CharExpression = CharExpression(value charValue other.value)
  def compare(y: CharExpression): IntExpression = IntExpression(value compare other.value)
  def compareTo(that: CharExpression): IntExpression = IntExpression(value compareTo other.value)
  def doubleValue(): DoubleExpression = DoubleExpression(value doubleValue other.value)
  def floatValue(): FloatExpression = FloatExpression(value floatValue other.value)
  def intValue(): IntExpression = IntExpression(value intValue other.value)
  def isWhole(): BooleanExpression = BooleanExpression(value isWhole other.value)
  def longValue(): LongExpression = LongExpression(value longValue other.value)
  def max(that: CharExpression): CharExpression = CharExpression(value max other.value)
  def min(that: CharExpression): CharExpression = CharExpression(value min other.value)
  def shortValue(): ShortExpression = ShortExpression(value shortValue other.value)
  def abs: CharExpression = CharExpression(value.abs)
  def asDigit: IntExpression = IntExpression(value.asDigit)
  def getDirectionality: ByteExpression = ByteExpression(value.getDirectionality)
  def getNumericValue: IntExpression = IntExpression(value.getNumericValue)
  def getType: IntExpression = IntExpression(value.getType)
  def reverseByteExpressions: CharExpression = CharExpression(value.reverseByteExpressions)
  def signum: IntExpression = IntExpression(value.signum)
  def toLower: CharExpression = CharExpression(value.toLower)
  def toTitleCase: CharExpression = CharExpression(value.toTitleCase)
  def toUpper: CharExpression = CharExpression(value.toUpper)
  def isControl: BooleanExpression = BooleanExpression(value.isControl)
  def isDigit: BooleanExpression = BooleanExpression(value.isDigit)
  def isHighSurrogate: BooleanExpression = BooleanExpression(value.isHighSurrogate)
  def isIdentifierIgnorable: BooleanExpression = BooleanExpression(value.isIdentifierIgnorable)
  def isLetter: BooleanExpression = BooleanExpression(value.isLetter)
  def isLetterOrDigit: BooleanExpression = BooleanExpression(value.isLetterOrDigit)
  def isLowSurrogate: BooleanExpression = BooleanExpression(value.isLowSurrogate)
  def isLower: BooleanExpression = BooleanExpression(value.isLower)
  def isMirrored: BooleanExpression = BooleanExpression(value.isMirrored)
  def isSpaceCharExpression: BooleanExpression = BooleanExpression(value.isSpaceCharExpression)
  def isSurrogate: BooleanExpression = BooleanExpression(value.isSurrogate)
  def isTitleCase: BooleanExpression = BooleanExpression(value.isTitleCase)
  def isUnicodeIdentifierPart: BooleanExpression = BooleanExpression(value.isUnicodeIdentifierPart)
  def isUnicodeIdentifierStart: BooleanExpression = BooleanExpression(value.isUnicodeIdentifierStart)
  def isUpper: BooleanExpression = BooleanExpression(value.isUpper)
  def isValidByte: BooleanExpression = BooleanExpression(value.isValidByte)
  def isValidChar: BooleanExpression = BooleanExpression(value.isValidChar)
  def isValidInt: BooleanExpression = BooleanExpression(value.isValidInt)
  def isValidShort: BooleanExpression = BooleanExpression(value.isValidShort)
  def isWhitespace: Boolean = BooleanExpression(value.isWhitespace)
  def toByte: ByteExpression = ByteExpression(value.toByte)
  def toChar: CharExpression = CharExpression(value.toChar)
  def toDouble: DoubleExpression = DoubleExpression(value.toDouble)
  def toFloat: FloatExpression = FloatExpression(valuet.toFloat)
  def toInt: IntExpression = IntExpression(value.toInt)
  def toLong: LongExpression = LongExpression(value.toLong)
  def toShort: ShortExpression = ShortExpression(value.toShort)
  def unary_+: IntExpression = IntExpression(+value)
  def unary_-: IntExpression = IntExpression(-value)
  def unary_~: IntExpression = IntExpression(~value)
}

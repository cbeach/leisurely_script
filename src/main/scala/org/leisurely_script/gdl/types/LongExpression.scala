package org.leisurely_script.gdl.types

/**
  * Created by mcsmash on 1/25/16.
  */
case class LongExpressionExpression(value:LongExpression) extends GameAnyVal[LongExpression](value) { 
  def !=(x: DoubleExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: FloatExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: LongExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: IntExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: CharExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: ShortExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(x: ByteExpression): BooleanExpression = BooleanExpression(value != other.value)
  def %(x: DoubleExpression): DoubleExpression = DoubleExpression(value % other.value)
  def %(x: FloatExpression): FloatExpression = FloatExpression(value % other.value)
  def %(x: LongExpression): LongExpression = LongExpression(value % other.value)
  def %(x: IntExpression): LongExpression = LongExpression(value % other.value)
  def %(x: CharExpression): LongExpression = LongExpression(value % other.value)
  def %(x: ShortExpression): LongExpression = LongExpression(value % other.value)
  def %(x: ByteExpression): LongExpression = LongExpression(value % other.value)
  def &(x: LongExpression): LongExpression = LongExpression(value & other.value)
  def &(x: IntExpression): LongExpression = LongExpression(value & other.value)
  def &(x: CharExpression): LongExpression = LongExpression(value & other.value)
  def &(x: ShortExpression): LongExpression = LongExpression(value & other.value)
  def &(x: ByteExpression): LongExpression = LongExpression(value & other.value)
  def *(x: DoubleExpression): DoubleExpression = DoubleExpression(value * other.value)
  def *(x: FloatExpression): FloatExpression = FloatExpression(value * other.value)
  def *(x: LongExpression): LongExpression = LongExpression(value * other.value)
  def *(x: IntExpression): LongExpression = LongExpression(value * other.value)
  def *(x: CharExpression): LongExpression = LongExpression(value * other.value)
  def *(x: ShortExpression): LongExpression = LongExpression(value * other.value)
  def *(x: ByteExpression): LongExpression = LongExpression(value * other.value)
  def +(x: DoubleExpression): DoubleExpression = DoubleExpression(value + other.value)
  def +(x: FloatExpression): FloatExpression = FloatExpression(value + other.value)
  def +(x: LongExpression): LongExpression = LongExpression(value + other.value)
  def +(x: IntExpression): LongExpression = LongExpression(value + other.value)
  def +(x: CharExpression): LongExpression = LongExpression(value + other.value)
  def +(x: ShortExpression): LongExpression = LongExpression(value + other.value)
  def +(x: ByteExpression): LongExpression = LongExpression(value + other.value)
  def +(x: StringExpression): StringExpression = StringExpression(value + other.value)
  def -(x: DoubleExpression): DoubleExpression = DoubleExpression(value - other.value)
  def -(x: FloatExpression): FloatExpression = FloatExpression(value - other.value)
  def -(x: LongExpression): LongExpression = LongExpression(value - other.value)
  def -(x: IntExpression): LongExpression = LongExpression(value - other.value)
  def -(x: CharExpression): LongExpression = LongExpression(value - other.value)
  def -(x: ShortExpression): LongExpression = LongExpression(value - other.value)
  def -(x: ByteExpression): LongExpression = LongExpression(value - other.value)
  def /(x: DoubleExpression): DoubleExpression = DoubleExpression(value / other.value)
  def /(x: FloatExpression): FloatExpression = FloatExpression(value / other.value)
  def /(x: LongExpression): LongExpression = LongExpression(value / other.value)
  def /(x: IntExpression): LongExpression = LongExpression(value / other.value)
  def /(x: CharExpression): LongExpression = LongExpression(value / other.value)
  def /(x: ShortExpression): LongExpression = LongExpression(value / other.value)
  def /(x: ByteExpression): LongExpression = LongExpression(value / other.value)
  def <(x: DoubleExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: FloatExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: LongExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: IntExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: CharExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: ShortExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(x: ByteExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <<(x: LongExpression): LongExpression = LongExpression(value << other.value)
  def <<(x: IntExpression): LongExpression = LongExpression(value << other.value)
  def <=(x: DoubleExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: FloatExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: LongExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: IntExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: CharExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: ShortExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(x: ByteExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def ==(x: DoubleExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: FloatExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: LongExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: IntExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: CharExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: ShortExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(x: ByteExpression): BooleanExpression = BooleanExpression(value == other.value)
  def >(x: DoubleExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: FloatExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: LongExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: IntExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: CharExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: ShortExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(x: ByteExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >=(x: DoubleExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: FloatExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: LongExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: IntExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: CharExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: ShortExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(x: ByteExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >>(x: LongExpression): LongExpression = LongExpression(value >> other.value)
  def >>(x: IntExpression): LongExpression = LongExpression(value >> other.value)
  def >>>(x: LongExpression): LongExpression = LongExpression(value >>> other.value)
  def >>>(x: IntExpression): LongExpression = LongExpression(value >>> other.value)
  def ^(x: LongExpression): LongExpression = LongExpression(value ^ other.value)
  def ^(x: IntExpression): LongExpression = LongExpression(value ^ other.value)
  def ^(x: CharExpression): LongExpression = LongExpression(value ^ other.value)
  def ^(x: ShortExpression): LongExpression = LongExpression(value ^ other.value)
  def ^(x: ByteExpression): LongExpression = LongExpression(value ^ other.value)
  def toByte: ByteExpression = ByteExpression(value.toByte)
  def toChar: CharExpression = CharExpression(value.toChar)
  def toDouble: DoubleExpression = DoubleExpression(value.toDouble)
  def toFloat: FloatExpression = FloatExpression(value.toFloat)
  def toInt: IntExpression = IntExpression(value.toInt)
  def toLong: LongExpression = LongExpression(value.toLong)
  def toShort: ShortExpression = ShortExpression(value.toShort)
  def unary_+: LongExpression = LongExpression(+value)
  def unary_-: LongExpression = LongExpression(-value)
  def unary_~: LongExpression = LongExpression(~value)
  def |(x: LongExpression): LongExpression = LongExpression(value | other.value)
  def |(x: IntExpression): LongExpression = LongExpression(value | other.value)
  def |(x: CharExpression): LongExpression = LongExpression(value | other.value)
  def |(x: ShortExpression): LongExpression = LongExpression(value | other.value)
  def |(x: ByteExpression): LongExpression = LongExpression(value | other.value)
  def abs: LongExpression = LongExpression(value.abs)
  def compare(y: LongExpression): IntExpression = IntExpression(value compare other.value)
  def compareTo(arg0: java.lang.LongExpression): IntExpression = IntExpression(value compareTo other.value)
  def compareTo(that: LongExpression): IntExpression = IntExpression(value compareTo other.value)
  def isValidByte: BooleanExpression = BooleanExpression(value.isValidByte)
  def isValidChar: BooleanExpression = BooleanExpression(value.isValidChar)
  def isValidInt: BooleanExpression = BooleanExpression(value.isValidInt)
  def isValidLong: BooleanExpression = BooleanExpression(value.isValidLong)
  def isValidShort: BooleanExpression = BooleanExpression(value.isValidShort)
  def isWhole(): BooleanExpression = BooleanExpression(value isWhole other.value)
  def max(that: LongExpression): LongExpression = LongExpression(value max other.value)
  def min(that: LongExpression): LongExpression = LongExpression(value min other.value)
  def signum: IntExpression = IntExpression(value.signum)
  def toBinaryString: StringExpression = StringExpression(value.toBinaryString)
  def toHexString: StringExpression = StringExpression(value.toHexString)
  def toOctalString: StringExpression = StringExpression(value.toOctalString)
}

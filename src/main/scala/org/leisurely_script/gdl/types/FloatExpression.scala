package org.leisurely_script.gdl.types

import scala.reflect.runtime.universe._

/**
  * Created by mcsmash on 1/25/16.
  */
class FloatExpression extends AnyValExpression[Float] {
  def this(v:Float) = {
    this
    value = v
  }
  override def evaluate:Option[Float] = Some(value)
  def !=(other: DoubleExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(other: FloatExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(other: LongExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(other: IntExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(other: CharExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(other: ShortExpression): BooleanExpression = BooleanExpression(value != other.value)
  def !=(other: ByteExpression): BooleanExpression = BooleanExpression(value != other.value)
  def %(other: DoubleExpression): DoubleExpression = DoubleExpression(value % other.value)
  def %(other: FloatExpression): FloatExpression = FloatExpression(value % other.value)
  def %(other: LongExpression): FloatExpression = FloatExpression(value % other.value)
  def %(other: IntExpression): FloatExpression = FloatExpression(value % other.value)
  def %(other: CharExpression): FloatExpression = FloatExpression(value % other.value)
  def %(other: ShortExpression): FloatExpression = FloatExpression(value % other.value)
  def %(other: ByteExpression): FloatExpression = FloatExpression(value % other.value)
  def *(other: DoubleExpression): DoubleExpression = DoubleExpression(value * other.value)
  def *(other: FloatExpression): FloatExpression = FloatExpression(value * other.value)
  def *(other: LongExpression): FloatExpression = FloatExpression(value * other.value)
  def *(other: IntExpression): FloatExpression = FloatExpression(value * other.value)
  def *(other: CharExpression): FloatExpression = FloatExpression(value * other.value)
  def *(other: ShortExpression): FloatExpression = FloatExpression(value * other.value)
  def *(other: ByteExpression): FloatExpression = FloatExpression(value * other.value)
  def +(other: DoubleExpression): DoubleExpression = DoubleExpression(value + other.value)
  def +(other: FloatExpression): FloatExpression = FloatExpression(value + other.value)
  def +(other: LongExpression): FloatExpression = FloatExpression(value + other.value)
  def +(other: IntExpression): FloatExpression = FloatExpression(value + other.value)
  def +(other: CharExpression): FloatExpression = FloatExpression(value + other.value)
  def +(other: ShortExpression): FloatExpression = FloatExpression(value + other.value)
  def +(other: ByteExpression): FloatExpression = FloatExpression(value + other.value)
  def +(other: StringExpression): StringExpression = StringExpression(value + other.value)
  def -(other: DoubleExpression): DoubleExpression = DoubleExpression(value - other.value)
  def -(other: FloatExpression): FloatExpression = FloatExpression(value - other.value)
  def -(other: LongExpression): FloatExpression = FloatExpression(value - other.value)
  def -(other: IntExpression): FloatExpression = FloatExpression(value - other.value)
  def -(other: CharExpression): FloatExpression = FloatExpression(value - other.value)
  def -(other: ShortExpression): FloatExpression = FloatExpression(value - other.value)
  def -(other: ByteExpression): FloatExpression = FloatExpression(value - other.value)
  def /(other: DoubleExpression): DoubleExpression = DoubleExpression(value / other.value)
  def /(other: FloatExpression): FloatExpression = FloatExpression(value / other.value)
  def /(other: LongExpression): FloatExpression = FloatExpression(value / other.value)
  def /(other: IntExpression): FloatExpression = FloatExpression(value / other.value)
  def /(other: CharExpression): FloatExpression = FloatExpression(value / other.value)
  def /(other: ShortExpression): FloatExpression = FloatExpression(value / other.value)
  def /(other: ByteExpression): FloatExpression = FloatExpression(value / other.value)
  def <(other: DoubleExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(other: FloatExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(other: LongExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(other: IntExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(other: CharExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(other: ShortExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <(other: ByteExpression): BooleanExpression = BooleanExpression(value < other.value)
  def <=(other: DoubleExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(other: FloatExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(other: LongExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(other: IntExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(other: CharExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(other: ShortExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def <=(other: ByteExpression): BooleanExpression = BooleanExpression(value <= other.value)
  def ==(other: DoubleExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(other: FloatExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(other: LongExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(other: IntExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(other: CharExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(other: ShortExpression): BooleanExpression = BooleanExpression(value == other.value)
  def ==(other: ByteExpression): BooleanExpression = BooleanExpression(value == other.value)
  def >(other: DoubleExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(other: FloatExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(other: LongExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(other: IntExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(other: CharExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(other: ShortExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >(other: ByteExpression): BooleanExpression = BooleanExpression(value > other.value)
  def >=(other: DoubleExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(other: FloatExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(other: LongExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(other: IntExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(other: CharExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(other: ShortExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def >=(other: ByteExpression): BooleanExpression = BooleanExpression(value >= other.value)
  def compare(other: FloatExpression): IntExpression = IntExpression(value compare other.value)
  def compareTo(other: FloatExpression): IntExpression = IntExpression(value compareTo other.value)
  def toByte: ByteExpression = ByteExpression(value.toByte)
  def toChar: CharExpression = CharExpression(value.toChar)
  def toDouble: DoubleExpression = DoubleExpression(value.toDouble)
  def toFloat: FloatExpression = FloatExpression(value.toFloat)
  def toInt: IntExpression = IntExpression(value.toInt)
  def toLong: LongExpression = LongExpression(value.toLong)
  def toShort: ShortExpression = ShortExpression(value.toShort)
  def unary_+: = FloatExpression(+value)
  def unary_-: = FloatExpression(-value)
  def abs: FloatExpression = FloatExpression(value.abs)
  def ceil: FloatExpression = FloatExpression(value.ceil)
  def floor: FloatExpression = FloatExpression(value.floor)
  def isInfinity: BooleanExpression = BooleanExpression(value.isInfinity)
  def isNaN: BooleanExpression = BooleanExpression(value.isNaN)
  def isNegInfinity: BooleanExpression = BooleanExpression(value.isNegInfinity)
  def isPosInfinity: BooleanExpression = BooleanExpression(value.isPosInfinity)
  def isValidByte: BooleanExpression = BooleanExpression(value.isValidByte)
  def isValidChar: BooleanExpression = BooleanExpression(value.isValidChar)
  def isValidInt: BooleanExpression = BooleanExpression(value.isValidInt)
  def isValidShort: BooleanExpression = BooleanExpression(value.isValidShort)
  def round: IntExpression = IntExpression(value.round)
  def signum: IntExpression = IntExpression(value.signum)
  def toDegrees: FloatExpression = FloatExpression(value.toDegrees)
  def toRadians: FloatExpression = FloatExpression(value.toRadians)
  def isInfinite(): BooleanExpression = BooleanExpression(value isInfinite)
  def isWhole(): BooleanExpression = BooleanExpression(value isWhole)
  def max(other: FloatExpression): FloatExpression = FloatExpression(value max other.value)
  def min(other: FloatExpression): FloatExpression = FloatExpression(value min other.value)
}

object FloatExpression {
  def apply(v:Float) = {
    new FloatExpression(v)
  }
}
